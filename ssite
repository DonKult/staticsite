#!/usr/bin/python3
# coding: utf-8
import sys
import os
import argparse
import logging
import json
import time
from staticsite.core import Site, load_settings, settings

log = logging.getLogger()

class CmdlineError(RuntimeError):
    pass


def main():
    parser = argparse.ArgumentParser(description="Convert from ikiwiki to hugo.")

    subparsers = parser.add_subparsers(help="sub-command help", dest="command")

    parser_build = subparsers.add_parser("build", help="build the site")
    parser_build.add_argument("rootdir", nargs="?", help="project directory (default: the current directory)")
    parser_build.add_argument("-v", "--verbose", action="store_true", help="verbose output")
    parser_build.add_argument("--debug", action="store_true", help="verbose output")

    parser_check = subparsers.add_parser("check", help="check the site, without writing anything")
    parser_check.add_argument("rootdir", nargs="?", help="project directory (default: the current directory)")
    parser_check.add_argument("-v", "--verbose", action="store_true", help="verbose output")
    parser_check.add_argument("--debug", action="store_true", help="verbose output")

    args = parser.parse_args()

    FORMAT = "%(asctime)-15s %(levelname)s %(message)s"
    if args.debug:
        logging.basicConfig(level=logging.DEBUG, stream=sys.stderr, format=FORMAT)
    elif args.verbose:
        logging.basicConfig(level=logging.INFO, stream=sys.stderr, format=FORMAT)
    else:
        logging.basicConfig(level=logging.WARN, stream=sys.stderr, format=FORMAT)

    # Default to current directory if rootdir was not provided
    if args.rootdir:
        root = os.path.abspath(args.rootdir)
    else:
        root = os.getcwd()

    # Double check that root points to something that looks like a project
    site_root = os.path.join(root, "site")
    if not os.path.exists(site_root):
        raise CmdlineError("{} does not exist".format(site_root))

    # Load settings (optional)
    settings_file = os.path.join(root, "settings.py")
    if os.path.isfile(settings_file):
        load_settings(settings_file)

    # Instantiate site
    site = Site(root)

    # Read and analyze site contents
    start = time.perf_counter()
    site.read_tree()
    site.read_theme_asset_tree("theme/static")
    end = time.perf_counter()
    log.info("Read site tree in %fs", end-start)

    start = time.perf_counter()
    site.analyze()
    end = time.perf_counter()
    log.info("Analised site tree in %fs", end-start)

    # TODO: redo argparse with subcommands

    if args.command == "build":
        from staticsite.web import WebWriter
        writer = WebWriter(args.rootdir)
    elif args.command == "check":
        from staticsite.check import Checker
        writer = Checker()
    else:
        raise CmdlineError("Command {} is not supported".format(args.command))

    start = time.perf_counter()
    writer.write(site)
    end = time.perf_counter()
    log.info("Processed site in %fs", end-start)


if __name__ == "__main__":
    try:
        main()
    except CmdlineError as e:
        print(e, file=sys.stderr)
        sys.exit(1)
