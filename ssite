#!/usr/bin/python3
# coding: utf-8
import sys
import os
import argparse
import logging
import json
import time
from staticsite.core import Site

log = logging.getLogger()

class CmdlineError(RuntimeError):
    pass


def main():
    parser = argparse.ArgumentParser(description="Convert from ikiwiki to hugo.")
    parser.add_argument("rootdir", help="source directory")
    parser.add_argument("-v", "--verbose", action="store_true", help="verbose output")
    parser.add_argument("--debug", action="store_true", help="verbose output")
    parser.add_argument("-t", "--type", action="store", help="output type (dump, hugo, nikola)")

    args = parser.parse_args()

    FORMAT = "%(asctime)-15s %(levelname)s %(message)s"
    if args.debug:
        logging.basicConfig(level=logging.DEBUG, stream=sys.stderr, format=FORMAT)
    elif args.verbose:
        logging.basicConfig(level=logging.INFO, stream=sys.stderr, format=FORMAT)
    else:
        logging.basicConfig(level=logging.WARN, stream=sys.stderr, format=FORMAT)

    site = Site(os.path.abspath(os.path.join(args.rootdir, "site")))

    start = time.perf_counter()
    site.read_tree()
    end = time.perf_counter()
    log.info("Read site tree in %fs", end-start)

    start = time.perf_counter()
    site.analyze()
    end = time.perf_counter()
    log.info("Analised site tree in %fs", end-start)

    # TODO: redo argparse with subcommands

    if args.type == "dump":
        pass
        #from staticsite.dump import DumpWriter
        #if not args.destdir:
        #    raise CmdlineError("Please provide a destination directory for the dump command")
        #writer = DumpWriter(args.rootdir)
    elif args.type == "build":
        from staticsite.web import WebWriter
        writer = WebWriter(args.rootdir)
    elif not args.type:
        from staticsite.check import Checker
        writer = Checker()
    else:
        raise CmdlineError("Output type {} is not supported".format(args.type))

    start = time.perf_counter()
    writer.write(site)
    end = time.perf_counter()
    log.info("Processed site in %fs", end-start)


if __name__ == "__main__":
    try:
        main()
    except CmdlineError as e:
        print(e, file=sys.stderr)
        sys.exit(1)
